<project name="esup-commons-devel" default="_commons-error" basedir=".">

	<import file="${basedir}/build-commons-devel-missing-targets.xml" optional="true" />
	<!--import file="${commons.basedir}/installer/build-commons-izpack.xml" optional="true" /-->
	
	<target name="_commons-error" >
		<fail message="do not use build-commons-devel.xml, use build-devel.xml!" />
	</target>

	<tstamp>
		<format property="date" pattern="d-MMMM-yyyy HH:mma" locale="en"/>
	</tstamp>

	<property name="devel" value="true" />

	<property name="commons.webapp.dir" value="${commons.basedir}/webapp"/>
	<property name="commons.media.dir" value="${commons.webapp.dir}/media"/>
	<property name="commons.src.dir" value="${commons.basedir}/src"/>
	<property name="commons.lib.dir" value="${commons.webapp.dir}/WEB-INF/lib"/>
	<property name="commons.props.dir" value="${commons.basedir}/properties"/>
	<property name="utils.dir" value="${commons.basedir}/utils"/>
	<property name="website.dir" value="${basedir}/website"/>
	<property name="tmp.dir" value="${basedir}/tmp"/>
	<property name="doc.dir" value="${basedir}/docs"/>
	<property name="javadoc.dir" value="${doc.dir}/api"/>
	<property name="dist.dir" value="${basedir}/dist"/>
	<property name="dbf.xml.version" value="4.4" />
	<property name="dbf.xsl.version" value="1.70.0" />
	<property name="include.dir" value="${basedir}/include"/>

	<property name="docbook.src.dir" value="${doc.dir}/docbook" />
	<property name="docbook.images.dir" value="${docbook.src.dir}/images" />
	<property name="docbook.templates.dir" value="${doc.dir}/templates" />
	<property name="docbook.styles.dir" value="${docbook.templates.dir}/styles" />
	<property name="docbook.css.dir" value="${docbook.templates.dir}/css" />
	<property name="docbook.utils.dir" value="${utils.dir}/docbook" />
	<property name="docbook.lib.dir" value="${docbook.utils.dir}/lib" />
	<property name="docbook.resolver.dir" value="${docbook.utils.dir}/resolver" />
	<property name="docbook.zip.dir" value="${docbook.utils.dir}/zip" />
	<property name="docbook.commons.styles.dir" value="${docbook.utils.dir}/styles" />
	<property name="docbook.commons.css.dir" value="${docbook.utils.dir}/css" />
	<property name="dbf.basedir" value="${basedir}" />
	<property name="dbf.xml.dir" value="${tmp.dir}/docbook-xml-${dbf.xml.version}" />
	<property name="dbf.xsl.dir" value="${tmp.dir}/docbook-xsl-${dbf.xsl.version}" />
	<property name="xslt-db.jar" value="saxon653.jar" />

	<!-- copying build-commons.xml locally to prevent from ant warnings in Eclipse -->
	<copy file="${commons.basedir}/build-commons.xml" todir="${basedir}" />

	<!-- copying build-commons-devel.xml locally to prevent from ant warnings in Eclipse -->
	<copy file="${commons.basedir}/build-commons-devel.xml" todir="${basedir}" />

	<import file="${basedir}/build.xml"/>

	<!-- copying esup-commons.tld locally to get the tag completion -->
	<copy file="${commons.webapp.dir}/WEB-INF/esup-commons.tld" todir="${webapp.dir}/WEB-INF" />

	<target name="_commons-clean" >
		<ant dir="${commons.basedir}" target="_clean" />
	    <delete dir="${website.dir}"/>
	    <delete dir="${tmp.dir}"/>
	</target>

	<target name="_commons-print-application-properties" depends="check-log4j-batch-config,compile-batch" description="update the version number">
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.PrintApplicationProperties">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="${app.config}"/>
	    </java>
		<property file="${app.config}" />
		<mkdir dir="${webapp.dir}/META-INF"/>
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.PrintManifest">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="${webapp.dir}/META-INF/MANIFEST.MF"/>
	    </java>
	</target>

	<target name="_commons-prepare" />

	<target name="_commons-compile-web" />

	<target name="_commons-compile-batch" />

	<target name="_commons-compile-shared" />

	<target name="_commons-compile" />

	<target name="_commons-deploy" />

	<target name="_commons-javadoc" depends="compile" >
		<if>
			<isset property="docs.format" />
			<then>
				<delete failonerror="false" dir="${javadoc.dir}" />
				<mkdir dir="${javadoc.dir}" />
				<javadoc private="yes" author="yes" version="yes" 
						linksource="yes" nodeprecated="yes"
						windowtitle="${app.name} ${app.version} source documentation"
						destdir="${javadoc.dir}" useexternalfile="yes">  
					<classpath refid="compile.classpath"/>
					<fileset dir="${src.dir}" includes="**/*.java" />
					<fileset dir="${commons.src.dir}" includes="**/*.java" />
				</javadoc>
			</then>
			<else>
				<echo>property docs.format is not set, no javadoc generation (set this property empty to generate the source docs only).</echo>
			</else>
		</if>
	</target>

	<macrodef name="_docbook-prepare" >
		<sequential>
			<echo>checking docbook properties...</echo>
			<if>
				<not>
					<or>
						<equals arg1="${docs.docbook.html}" arg2="true"/>
						<equals arg1="${docs.docbook.htmlsingle}" arg2="true"/>
						<equals arg1="${docs.docbook.pdf}" arg2="true"/>
					</or>
				</not>
				<then>
					<fail message="one of the properties docs.docbook.html, docs.docbook.htmlsingle or docs.docbook.pdf must be set to true when docs.docbook is set to docbook." />
				</then>
			</if>
			<echo>installing docbook utilities...</echo>
			<if>
				<not>
					<available file="${tmp.dir}/xml-catalog.xml" />
				</not>
				<then>
					<mkdir dir="${dbf.xml.dir}" />
					<unzip src="${docbook.zip.dir}/docbook-xml-${dbf.xml.version}.zip" dest="${dbf.xml.dir}" />
					<mkdir dir="${dbf.xsl.dir}" />
					<unzip src="${docbook.zip.dir}/docbook-xsl-${dbf.xsl.version}.zip" dest="${tmp.dir}" />
					<copy todir="${tmp.dir}" filtering="on" overwrite="true">
						<fileset dir="${docbook.resolver.dir}"/>
						<filterchain>
							<expandproperties/>
						</filterchain>
					</copy>
				</then>
			</if>
		</sequential>
	</macrodef>	

	<if>
		<os family="windows"/>
		<then>
			<property name="file.prefix" value="file:///" />
		</then>
		<else>
			<property name="file.prefix" value="file://" />
		</else>
	</if>

	<path id="dbf.classpath">
		<fileset dir="${docbook.lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<pathelement location="${tmp.dir}"/>
	</path>
	<macrodef name="_docbook-saxon">
		<attribute name="input"/>
		<attribute name="output"/>
		<attribute name="style"/>
		<sequential>
			<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${basedir}" classpathref="dbf.classpath">
				<arg line="-x org.apache.xml.resolver.tools.ResolvingXMLReader"/>
				<arg line="-y org.apache.xml.resolver.tools.ResolvingXMLReader"/>
				<arg line="-r org.apache.xml.resolver.tools.CatalogResolver"/>
				<arg value="-o"/>
				<arg value="@{output}"/>
				<arg value="@{input}"/>
				<arg value="@{style}"/>
			</java>
		</sequential>
	</macrodef>

	<!-- ==================== parseFile =================================== -->
	<target name="_docbook-parseFile">
		<mkdir dir="${tmp.dir}"/>
		<!-- store the property into a file -->
		<echo file="${tmp.dir}/file.tmp" append="false">${xmlInputFile}</echo>
		<replace file="${tmp.dir}/file.tmp" token="\" value="/" />
		<loadfile property="file" srcFile="${tmp.dir}/file.tmp"/>
		<echo>file=${file}</echo>
		<delete file="${tmp.dir}/file.tmp"/>
		<!-- get the dirname of the file -->
		<propertyregex property="docbook.currentDir" input="${file}" regexp="^.*/(.*)/.*\.*" select="\1" casesensitive="false" defaultValue="null" />
		<!-- get the filename of the file -->
		<propertyregex property="docbook.currentFile" input="${file}" regexp="^.*/(.*)\.xml" select="\1" casesensitive="false"  defaultvalue="null"/>
		<echo>parsing ${docbook.currentDir}/${docbook.currentFile}...</echo>
	</target>

	<macrodef name="_docbook-copy-css">
		<attribute name="subdir"/>
		<sequential>
			<echo>copying stylesheets from ${docbook.commons.css.dir} to ${website.dir}/@{subdir}/css...</echo>
			<copy todir="${website.dir}/@{subdir}/css">
				<fileset dir="${docbook.commons.css.dir}"/>
			</copy>
			<if>
				<available file="${docbook.css.dir}" />
				<then>
					<echo>copying stylesheets from ${docbook.css.dir} to ${website.dir}/@{subdir}/css...</echo>
					<copy todir="${website.dir}/@{subdir}/css">
						<fileset dir="${docbook.css.dir}"/>
					</copy>
				</then>
				<else>
					<echo>no stylesheet found in ${docbook.css.dir}</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="_docbook-copy-images">
		<attribute name="subdir"/>
		<sequential>
			<echo>copying DBF images...</echo>
			<copy todir="${website.dir}/@{subdir}/images">
				<fileset dir="${dbf.xsl.dir}/images/"/>
			</copy>
			<if>
				<available file="${docbook.images.dir}" />
				<then>
					<echo>copying project images...</echo>
					<copy todir="${website.dir}/@{subdir}/images">
						<fileset dir="${docbook.images.dir}"/>
					</copy>
				</then>
				<else>
					<echo>no image found in ${docbook.images.dir}</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<target name="_docbook-html-run" depends="_docbook-parseFile">
		<echo>writing ${tmp.dir}/html.xsl from ${docbook.commons.styles.dir}/html.xsl...</echo>
		<copy overwrite="true" filtering="on" file="${docbook.commons.styles.dir}/html.xsl" todir="${tmp.dir}">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<_docbook-copy-images subdir="${docbook.currentDir}/html/${docbook.currentFile}" />
		<_docbook-copy-css subdir="${docbook.currentDir}/html/${docbook.currentFile}" />
		<_docbook-saxon 
			input="${docbook.src.dir}/${docbook.currentDir}/${docbook.currentFile}.xml" 
			output="${website.dir}/${docbook.currentDir}/html/${docbook.currentFile}.html" 
			style="${tmp.dir}/html.xsl"/>
		<delete file="${website.dir}/${docbook.currentDir}/html/${docbook.currentFile}.html" />
	</target>

	<target name="_docbook-htmlsingle-run" depends="_docbook-parseFile">
		<_docbook-saxon 
			input="${docbook.src.dir}/${docbook.currentDir}/${docbook.currentFile}.xml" 
			output="${website.dir}/${docbook.currentDir}/htmlsingle/${docbook.currentFile}.html" 
			style="${tmp.dir}/htmlsingle.xsl"/>
		<_docbook-copy-images subdir="${docbook.currentDir}/htmlsingle" />
		<_docbook-copy-css subdir="${docbook.currentDir}/htmlsingle" />
	</target>

	<target name="_docbook-pdf-run" depends="_docbook-parseFile">
		<_docbook-saxon 
			input="${docbook.src.dir}/${docbook.currentDir}/${docbook.currentFile}.xml" 
			output="${tmp.dir}/${docbook.currentDir}/pdf/${docbook.currentFile}.xml" 
			style="${tmp.dir}/pdf.xsl"/>
		<if>
			<available file="${docbook.images.dir}" />
			<then>
				<echo>copying project images...</echo>
				<copy todir="${tmp.dir}/${docbook.currentDir}/pdf/images">
					<fileset dir="${docbook.images.dir}"/>
				</copy>
			</then>
			<else>
				<echo>no image found in ${docbook.images.dir}</echo>
			</else>
		</if>
		<mkdir dir="${website.dir}/${docbook.currentDir}/pdf" />
	    <java classname="org.apache.fop.apps.Fop" fork="true" maxmemory="256m"
	          dir="${basedir}" classpathref="dbf.classpath">
	      <arg value="${tmp.dir}/${docbook.currentDir}/pdf/${docbook.currentFile}.xml"/>
	      <arg value="${website.dir}/${docbook.currentDir}/pdf/${docbook.currentFile}.pdf"/>
	    </java>
		<delete dir="${website.dir}/pdf" />
	</target>

	<macrodef name="_docbook-write-html-titlepage">
		<sequential>
			<echo>creating HTML titlepage XSL...</echo>
			<if>
				<available file="${docbook.styles.dir}/titlepage-html.xml" />
				<then>
					<property name="docbook.titlepage.html" value="${docbook.styles.dir}/titlepage-html.xml" />
				</then>
				<else>
					<property name="docbook.titlepage.html" value="${dbf.xsl.dir}/html/titlepage.templates.xml" />
				</else>
			</if>
			<_docbook-saxon 
				input="${docbook.titlepage.html}" 
				output="${tmp.dir}/titlepage-html.xsl" 
				style="${dbf.xsl.dir}/template/titlepage.xsl"/>
		</sequential>
	</macrodef>
	
	<macrodef name="_docbook-write-pdf-titlepage">
		<sequential>
			<echo>creating PDF titlepage XSL...</echo>
			<if>
				<available file="${docbook.styles.dir}/titlepage-pdf.xml" />
				<then>
					<property name="docbook.titlepage.pdf" value="${docbook.styles.dir}/titlepage-pdf.xml" />
				</then>
				<else>
					<property name="docbook.titlepage.pdf" value="${dbf.xsl.dir}/fo/titlepage.templates.xml" />
				</else>
			</if>
			<_docbook-saxon 
				input="${docbook.titlepage.pdf}" 
				output="${tmp.dir}/titlepage-pdf.xsl" 
				style="${dbf.xsl.dir}/template/titlepage.xsl"/>
		</sequential>
	</macrodef>
	
	<macrodef name="_docbook-write-custom">
		<attribute name="commonsInput"/>
		<attribute name="projectInput"/>
		<attribute name="output"/>
		<sequential>
			<if>
				<available file="@{projectInput}" />
				<then>
					<echo>writing @{projectInput} to @{output}...</echo>
					<copy overwrite="true" file="@{projectInput}" tofile="@{output}" >
						<filterchain>
							<expandproperties />
						</filterchain>
					</copy>
				</then>
				<else>
					<echo>writing @{commonsInput} to @{output}...</echo>
					<copy overwrite="true" file="@{commonsInput}" tofile="@{output}" >
						<filterchain>
							<expandproperties />
						</filterchain>
					</copy>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="_docbook-iterate-source-files">
		<attribute name="target"/>
		<sequential>
			<echo>transforming XML source files...</echo>
			<foreach param="xmlInputFile" target="@{target}">
				<path>
					<fileset dir="${docbook.src.dir}">
						<include name="**/*.xml" />
					</fileset>
				</path>
			</foreach>				    
		</sequential>
	</macrodef>

	<target name="_commons-doc" depends="_commons-print-application-properties,_commons-javadoc" >
		<property file="build-devel.properties"/>
		<if>
			<isset property="docs.format" />
			<then>
			    <delete dir="${website.dir}" failonerror="false"/>
			    <mkdir dir="${website.dir}" />
			    <mkdir dir="${tmp.dir}" />
				<if>
					<or>
						<isset property="docs.examples.commons" />
						<isset property="docs.examples.app" />
					</or>
					<then>
						<delete dir="${doc.dir}/examples" />
						<mkdir dir="${doc.dir}/examples" />
						<if>
							<isset property="docs.examples.commons" />
							<then>
								<copy todir="${doc.dir}/examples" flatten="true">
									<fileset dir="${commons.basedir}" includes="${docs.examples.commons}"/>
								</copy>
							</then>
						</if>
						<if>
							<isset property="docs.examples.app" />
							<then>
								<copy todir="${doc.dir}/examples" flatten="true">
									<fileset dir="${basedir}" includes="${docs.examples.app}"/>
								</copy>
							</then>
						</if>
					</then>
				</if>
				<switch value="${docs.format}">
					<case value="html">
					    <copy todir="${website.dir}">
					    	<fileset dir="${doc.dir}" excludes="**/*.psd **/*.ppt **/*.pps **/*.pdf **/*.html latestVersion.txt **/*.doc spec/** Templates/**/* **/Thumbs.db images/contributors/**"/>
					    </copy>
					    <copy todir="${website.dir}">
					    	<fileset dir="${doc.dir}" includes="**/*.html latestVersion.txt"/>
							<filterchain>
								<expandproperties/>
								<tokenfilter>
									<replaceregex pattern="&lt;!--.*--&gt;" replace="&lt;!-- --&gt;" flags="g"/> 
								</tokenfilter>
							</filterchain>
					    </copy>
					</case>
					<case value="docbook">
						<_docbook-prepare />
						<if>
							<or>
								<equals arg1="${docs.docbook.html}" arg2="true"/>
								<equals arg1="${docs.docbook.htmlsingle}" arg2="true"/>
							</or>
							<then>
								<_docbook-write-html-titlepage />
							</then>
						</if>
						<if>
							<equals arg1="${docs.docbook.html}" arg2="true"/>
							<then>
								<echo>generating HTML documentation...</echo>
								<_docbook-write-custom
									projectInput="${docbook.styles.dir}/html-custom.xsl" 
									commonsInput="${docbook.commons.styles.dir}/custom.xsl" 
									output="${tmp.dir}/custom-html.xsl" />
								<_docbook-iterate-source-files target="_docbook-html-run" />
							</then>
					    </if>
						<if>
							<equals arg1="${docs.docbook.htmlsingle}" arg2="true"/>
							<then>
								<echo>generating HTMLSINGLE documentation...</echo>
								<echo>writing ${tmp.dir}/htmlsingle.xsl...</echo>
								<copy overwrite="true" filtering="on" file="${docbook.commons.styles.dir}/htmlsingle.xsl" todir="${tmp.dir}">
									<filterchain>
										<expandproperties />
									</filterchain>
								</copy>
								<_docbook-write-custom
									projectInput="${docbook.styles.dir}/htmlsingle-custom.xsl" 
									commonsInput="${docbook.commons.styles.dir}/custom.xsl" 
									output="${tmp.dir}/custom-htmlsingle.xsl" />
								<_docbook-iterate-source-files target="_docbook-htmlsingle-run" />
							</then>
					    </if>
						<if>
							<equals arg1="${docs.docbook.pdf}" arg2="true"/>
							<then>
								<echo>generating PDF documentation...</echo>
								<property name="docs.docbook.pdf.pagesize" value="A4" />
								<echo>docs.docbook.pdf.pagesize=${docs.docbook.pdf.pagesize}</echo>
								<_docbook-write-pdf-titlepage />
							    <mkdir dir="${website.dir}/pdf" />
								<echo>writing ${tmp.dir}/pdf.xsl...</echo>
								<copy overwrite="true" filtering="on" file="${docbook.commons.styles.dir}/pdf.xsl" todir="${tmp.dir}">
									<filterchain>
										<expandproperties />
									</filterchain>
								</copy>
								<_docbook-copy-images subdir="pdf" />
								<_docbook-write-custom
									projectInput="${docbook.styles.dir}/pdf-custom.xsl" 
									commonsInput="${docbook.commons.styles.dir}/custom.xsl" 
									output="${tmp.dir}/custom-pdf.xsl" />
								<_docbook-iterate-source-files target="_docbook-pdf-run" />
							</then>
					    </if>
					</case>
					<case value="">
						<echo>property docs.format is empty, javadoc only is generated.</echo>
					    <copy todir="${website.dir}">
					    	<fileset dir="${doc.dir}" />
					    </copy>
					</case>
					<default>
						<fail message="accepted values for property docs.format are 'html', 'docbook' and '' (empty)." />
					</default>
				</switch>
				<mkdir dir="${dist.dir}"/>
				<tar destfile="${dist.dir}/${app.name}-web-${app.version}-${app.release}.tar.gz" 
					longfile="gnu" compression="gzip">
					<tarfileset dir="${website.dir}" prefix=""/>
			    </tar>
			</then>
			<else>
				<echo>property docs.format is not set, no documentation is generated.</echo>
			</else>
		</if>
	</target>

	<target name="_commons-dist" depends="_commons-doc" >
		<if>
			<not>
				<isset property="app.release" />
			</not>
			<then>
				<fail message="properties app.release should be set in build-devel.properties" />
			</then>
		</if>
		<mkdir dir="${dist.dir}"/>
		<property name="commons.zip-files.include" value="
			build-commons.xml
			src/**/*.java src/**/*.html 
	    	utils/ant/ant-contrib-*.jar
	    	utils/cas/*.keystore
	    	webapp/media/**/*
    		webapp/index.jsp
    		webapp/stylesheets/**/*
    		webapp/WEB-INF/web.xml
    		properties/**/*example*
    		webapp/WEB-INF/esup-commons.tld
    		properties/i18n/bundles/*.properties
    		properties/jsf/commons-render-kit.xml
			properties/jsf/fck-faces-config.xml
			properties/jsf/commons-pattern-faces-config.xml
    	" />
		<property name="commons.zip-files.exclude.fixed" value="
			build/**/*
			properties/**/*example*.xml		
			properties/**/*example*.properties		
			properties/i18n/bundles/Custom*.properties
			" />
		<property name="commons.zip-files.exclude" value="
			" />
	    <delete file="${dist.dir}/${app.name}-${app.version}-${app.release}.zip" failonerror="false" />
		<if>
			<and>
				<isset property="docs.format" />
				<isset property="dist.include_docs" />
			</and>
			<then>
			    <zip  destfile="${dist.dir}/${app.name}-${app.version}-${app.release}.zip">
				    <zipfileset 
				    	dir="${commons.basedir}" 
				    	excludes="${commons.zip-files.exclude} ${commons.zip-files.exclude.fixed}" 
				    	includes="${commons.zip-files.include}"
				    	prefix="${app.name}-${app.version}"/>
				    <zipfileset 
				    	dir="${basedir}" 
				    	excludes="${app.zip-files.exclude}" 
				    	includes="${app.zip-files.include}"
				    	prefix="${app.name}-${app.version}"/>
  				    <zipfileset 
				    	dir="${include.dir}" 
				    	prefix="${app.name}-${app.version}"/>
				    <zipfileset dir="${website.dir}"
				    	prefix="${app.name}-${app.version}/docs"/>
			    </zip>
			</then>
			<else>
			    <zip destfile="${dist.dir}/${app.name}-${app.version}-${app.release}.zip">
				    <zipfileset 
				    	dir="${commons.basedir}" 
				    	excludes="${commons.zip-files.exclude} ${commons.zip-files.exclude.fixed}" 
				    	includes="${commons.zip-files.include}"
				    	prefix="${app.name}-${app.version}"/>
				    <zipfileset 
				    	dir="${basedir}" 
				    	excludes="${app.zip-files.exclude}" 
				    	includes="${app.zip-files.include}"
				    	prefix="${app.name}-${app.version}"/>
  				    <zipfileset 
				    	dir="${include.dir}" 
				    	prefix="${app.name}-${app.version}"/>
			    </zip>
			</else>
		</if>
		<delete dir="${tmp.dir}"/>
	</target>

	<target name="_commons-upload-doc" >
		<if>
			<not>
				<and>
					<isset property="upload-doc.user" />
					<isset property="upload-doc.password" />
				</and>
			</not>
			<then>
				<fail message="properties upload-doc.user and upload-doc.password should be set in build-devel.properties" />
			</then>
		</if>
		<property name="upload-doc.host" value="sourcesup.cru.fr"/>
		<property name="upload-doc.path" value="/var/www/SourceSup/webdir/${app.name}"/>
		<echo>removing old files...</echo>
		<sshexec trust="yes"
			host="${upload-doc.host}"
			username="${upload-doc.user}"
			password="${upload-doc.password}"
			command="cd ${upload-doc.path} &amp;&amp; touch file_exists &amp;&amp; rm -rf *"/>
		<echo>uploading the doc archive to ${upload-doc.host}...</echo>
		<scp trust="yes" 
			file="${dist.dir}/${app.name}-web-${app.version}-${app.release}.tar.gz" 
			todir="${upload-doc.user}:${upload-doc.password}@${upload-doc.host}:${upload-doc.path}"/>
		<echo>uncompressing and installing the archive...</echo>
		<sshexec trust="yes"
		host="${upload-doc.host}"
		username="${upload-doc.user}"
		password="${upload-doc.password}"
		command="cd ${upload-doc.path} &amp;&amp; tar zxf ${app.name}-web-${app.version}-${app.release}.tar.gz"/>
		<echo>removing the doc archive...</echo>
		<sshexec trust="yes"
		host="${upload-doc.host}"
		username="${upload-doc.user}"
		password="${upload-doc.password}"
		command="cd ${upload-doc.path} &amp;&amp; rm -f ${app.name}-web-*.tar.gz"/>
	</target>

</project>


